name: Build and Deploy Apps

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:

jobs:
  get-build-num:
    runs-on: ubuntu-latest
    env:
      BUILD_NUM_OFFSET: 115
    outputs:
      build-num: ${{ steps.build-num.outputs.build-num }}

    steps:
      - id: build-num
        run: echo build-num=$(($GITHUB_RUN_NUMBER + $BUILD_NUM_OFFSET)) >> $GITHUB_OUTPUT

  build-ios: # Build and deploy iOS app to App Store
    name: Build iOS
    needs:
      - get-build-num
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache pods
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          path: ./ios/Pods
          restore-keys: ${{ runner.os }}-pods-

      - name: Init Flutter CLI
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - run: flutter pub get

      - name: Import Apple provisioning profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n ${{ secrets.PROVISIONING_PROFILE }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/Submon_distribution.mobileprovision
          echo -n ${{ secrets.PROVISIONING_PROFILE_WIDGETKIT }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/Submon_WidgetKit_Production.mobileprovision

      - name: Import code-signing certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}

      - name: Import App Store Connect API key
        run: |
          mkdir ~/private_keys
          echo -n "${{ secrets.APP_STORE_PRIVKEY_P8 }}" > ~/private_keys/AuthKey_${{ secrets.APP_STORE_PRIVKEY_ID }}.p8

      - name: Import .env
        run: echo -n "${{ secrets.DOTENV }}" > .env

      - name: Import GoogleService-Info.plist
        run: echo -n "${{ secrets.APPLE_GOOGLE_SERVICE_INFO_RELEASE_PLIST_BASE64 }}" | base64 -d > ios/GoogleService-Info-release.plist

      - name: Build IPA
        run: flutter build ipa --build-number ${{ needs.get-build-num.outputs.build-num }} --export-options-plist ios/exportOptions.plist

      - name: Deploy to App Store
        run: |
          xcrun altool --upload-app --type ios -f "./build/ios/ipa/Submon.ipa"\
            --apiKey ${{ secrets.APP_STORE_PRIVKEY_ID }}\
            --apiIssuer ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}

  build-android: # Build and deploy Android app to Google Play
    name: Build Android
    needs:
      - get-build-num
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Init Flutter CLI
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'

      - run: flutter pub get

      - name: Setup Ruby # for fastlane (tools for deploying to Google Play)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Install Fastlane
        run: bundle install

      - name: Import keystore
        run: |
          echo -n '
          ${{ secrets.ANDROID_LOCAL_PROPERTIES }}' >> android/local.properties
          echo -n "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/release.jks

      - name: Import .env
        run: echo -n "${{ secrets.DOTENV }}" > .env

      - name: Import google-services.json
        run: |
          mkdir -p android/app/src/release
          echo -n ${{ secrets.ANDROID_GOOGLE_SERVICES_JSON_BASE64 }} | base64 -d > android/app/src/release/google-services.json

      - name: Build App Bundle for Android
        run: flutter build appbundle --build-number ${{ needs.get-build-num.outputs.build-num }}

      - name: Import Service Account Key
        run: echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64 }}' | base64 -d > service_account_key.json

      - name: Create native debug symbols
        working-directory: ./build/app/intermediates/merged_native_libs/release/out/lib
        run: zip -r ../../../../../../../native_debug_symbols.zip ./* -x "*x86/*"

      - name: Deploy to Google Play
        run: |
          bundle exec fastlane supply \
            --verbose\
            --aab build/app/outputs/bundle/release/app-release.aab\
            --mapping_paths native_debug_symbols.zip,build/app/outputs/mapping/release/mapping.txt\
            --track internal\
            --skip_upload_metadata\
            --skip_upload_changelogs\
            --skip_upload_screenshots\
            --package_name net.chikach.submon\
            --json_key service_account_key.json

  create-release:
    name: Create release
    needs:
      - build-ios
      - build-android
    runs-on: ubuntu-latest
    if: "!contains(github.ref, '-')"
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          generate_release_notes: true