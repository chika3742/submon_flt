// Copyright 2023 chika All Rights Reserved.
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Whether the notification permission has been granted or denied.
enum NotificationPermissionState: Int {
  case granted = 0
  case denied = 1
}

/// Wraps a NotificationPermissionState enum.
/// (Pigeon cannot handle enums as primitive return values)
///
/// Generated class from Pigeon that represents data sent in messages.
struct NotificationPermissionStateWrapper {
  var value: NotificationPermissionState

  static func fromList(_ list: [Any?]) -> NotificationPermissionStateWrapper? {
    let value = NotificationPermissionState(rawValue: list[0] as! Int)!

    return NotificationPermissionStateWrapper(
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      value.rawValue,
    ]
  }
}

private class MessagingApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return NotificationPermissionStateWrapper.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class MessagingApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NotificationPermissionStateWrapper {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagingApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagingApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagingApiCodecWriter(data: data)
  }
}

class MessagingApiCodec: FlutterStandardMessageCodec {
  static let shared = MessagingApiCodec(readerWriter: MessagingApiCodecReaderWriter())
}

/// A set of APIs to handle Firebase Cloud Messaging.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MessagingApi {
  /// Gets the FCM token for this device.
  func getToken(completion: @escaping (Result<String, Error>) -> Void)
  /// Requests notification permission from the user.
  func requestNotificationPermission(completion: @escaping (Result<NotificationPermissionStateWrapper?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MessagingApiSetup {
  /// The codec used by MessagingApi.
  static var codec: FlutterStandardMessageCodec { MessagingApiCodec.shared }
  /// Sets up an instance of `MessagingApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MessagingApi?) {
    /// Gets the FCM token for this device.
    let getTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.MessagingApi.getToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getTokenChannel.setMessageHandler { _, reply in
        api.getToken() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getTokenChannel.setMessageHandler(nil)
    }
    /// Requests notification permission from the user.
    let requestNotificationPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.MessagingApi.requestNotificationPermission", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestNotificationPermissionChannel.setMessageHandler { _, reply in
        api.requestNotificationPermission() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestNotificationPermissionChannel.setMessageHandler(nil)
    }
  }
}
/// Browser-related APIs.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BrowserApi {
  /// Opens a custom tab which returns the callback URL.
  /// Returns null if cancelled.
  ///
  /// This method is only available on Android.
  func openAuthCustomTab(url: String, completion: @escaping (Result<String?, Error>) -> Void)
  /// Opens a web page in WebView activity (on Android) or
  /// [SFSafariViewController](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller)
  /// (on iOS).
  ///
  /// `title` is used as the title of the activity on Android.
  /// (unused on iOS)
  func openWebPage(title: String, url: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BrowserApiSetup {
  /// The codec used by BrowserApi.
  /// Sets up an instance of `BrowserApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BrowserApi?) {
    /// Opens a custom tab which returns the callback URL.
    /// Returns null if cancelled.
    ///
    /// This method is only available on Android.
    let openAuthCustomTabChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.BrowserApi.openAuthCustomTab", binaryMessenger: binaryMessenger)
    if let api = api {
      openAuthCustomTabChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        api.openAuthCustomTab(url: urlArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      openAuthCustomTabChannel.setMessageHandler(nil)
    }
    /// Opens a web page in WebView activity (on Android) or
    /// [SFSafariViewController](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller)
    /// (on iOS).
    ///
    /// `title` is used as the title of the activity on Android.
    /// (unused on iOS)
    let openWebPageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.BrowserApi.openWebPage", binaryMessenger: binaryMessenger)
    if let api = api {
      openWebPageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let titleArg = args[0] as! String
        let urlArg = args[1] as! String
        do {
          try api.openWebPage(title: titleArg, url: urlArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      openWebPageChannel.setMessageHandler(nil)
    }
  }
}
/// General APIs.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GeneralApi {
  /// Updates the widgets on the home screen.
  func updateWidgets() throws
  /// Requests the IDFA (Identifier for Advertisers) from the user on iOS.
  func requestIDFA(completion: @escaping (Result<Bool, Error>) -> Void)
  /// Sets the wake lock (`isIdleTimerDisabled` on iOS, `` on Android) state.
  func setWakeLock(enabled: Bool) throws
  /// Sets the fullscreen state.
  ///
  /// This method is only available on Android.
  func setFullscreen(isFullscreen: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GeneralApiSetup {
  /// The codec used by GeneralApi.
  /// Sets up an instance of `GeneralApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GeneralApi?) {
    /// Updates the widgets on the home screen.
    let updateWidgetsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.GeneralApi.updateWidgets", binaryMessenger: binaryMessenger)
    if let api = api {
      updateWidgetsChannel.setMessageHandler { _, reply in
        do {
          try api.updateWidgets()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateWidgetsChannel.setMessageHandler(nil)
    }
    /// Requests the IDFA (Identifier for Advertisers) from the user on iOS.
    let requestIDFAChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.GeneralApi.requestIDFA", binaryMessenger: binaryMessenger)
    if let api = api {
      requestIDFAChannel.setMessageHandler { _, reply in
        api.requestIDFA() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestIDFAChannel.setMessageHandler(nil)
    }
    /// Sets the wake lock (`isIdleTimerDisabled` on iOS, `` on Android) state.
    let setWakeLockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.GeneralApi.setWakeLock", binaryMessenger: binaryMessenger)
    if let api = api {
      setWakeLockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setWakeLock(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setWakeLockChannel.setMessageHandler(nil)
    }
    /// Sets the fullscreen state.
    ///
    /// This method is only available on Android.
    let setFullscreenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.GeneralApi.setFullscreen", binaryMessenger: binaryMessenger)
    if let api = api {
      setFullscreenChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isFullscreenArg = args[0] as! Bool
        do {
          try api.setFullscreen(isFullscreen: isFullscreenArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setFullscreenChannel.setMessageHandler(nil)
    }
  }
}
/// Updates the DND (Do Not Disturb) state.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DndApi {
  /// Returns whether the DND permission has been granted.
  func isAccessGranted() throws -> Bool
  /// Transits to the DND permission settings page.
  func goToPolicySettings() throws
  /// Sets the DND state.
  func setDndEnabled(enabled: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DndApiSetup {
  /// The codec used by DndApi.
  /// Sets up an instance of `DndApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DndApi?) {
    /// Returns whether the DND permission has been granted.
    let isAccessGrantedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.DndApi.isAccessGranted", binaryMessenger: binaryMessenger)
    if let api = api {
      isAccessGrantedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isAccessGranted()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isAccessGrantedChannel.setMessageHandler(nil)
    }
    /// Transits to the DND permission settings page.
    let goToPolicySettingsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.DndApi.goToPolicySettings", binaryMessenger: binaryMessenger)
    if let api = api {
      goToPolicySettingsChannel.setMessageHandler { _, reply in
        do {
          try api.goToPolicySettings()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      goToPolicySettingsChannel.setMessageHandler(nil)
    }
    /// Sets the DND state.
    let setDndEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.submon.DndApi.setDndEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      setDndEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setDndEnabled(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDndEnabledChannel.setMessageHandler(nil)
    }
  }
}
