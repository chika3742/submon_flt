// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package net.chikach.submon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignInCallback {
    private @NonNull String uri;
    public @NonNull String getUri() { return uri; }
    public void setUri(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uri\" is null.");
      }
      this.uri = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private SignInCallback() {}
    public static final class Builder {
      private @Nullable String uri;
      public @NonNull Builder setUri(@NonNull String setterArg) {
        this.uri = setterArg;
        return this;
      }
      public @NonNull SignInCallback build() {
        SignInCallback pigeonReturn = new SignInCallback();
        pigeonReturn.setUri(uri);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uri", uri);
      return toMapResult;
    }
    static @NonNull SignInCallback fromMap(@NonNull Map<String, Object> map) {
      SignInCallback pigeonResult = new SignInCallback();
      Object uri = map.get("uri");
      pigeonResult.setUri((String)uri);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class UtilsApiCodec extends StandardMessageCodec {
    public static final UtilsApiCodec INSTANCE = new UtilsApiCodec();
    private UtilsApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return SignInCallback.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof SignInCallback) {
        stream.write(128);
        writeValue(stream, ((SignInCallback) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface UtilsApi {
    /**
     *
     * Opens web page with new activity on Android, with SFSafariViewController on iOS.
     * On Android, [title] will be the title of activity. On iOS, [title] will be ignored.
     *
     */
    void openWebPage(@NonNull String title, @NonNull String url);
    /**
     *
     * Opens Custom Tab for signing in. Returns response URI with token query parameters.
     *
     */
    void openSignInCustomTab(@NonNull String url, Result<SignInCallback> result);
    /**
     *
     * Updates App Widgets on Android, WidgetKit on iOS.
     *
     */
    void updateWidgets();
    /**
     *
     * Requests iOS/macOS ATT permission. On Android, this method does nothing.
     *
     * Permission requesting result will be returned. On Android, always `true` will be returned.
     *
     */
    void requestIDFA(Result<Boolean> result);
    /**
     *
     * Sets wake lock mode.
     *
     */
    void setWakeLock(@NonNull Boolean wakeLock);
    /**
     *
     * Sets fullscreen mode.
     *
     */
    void setFullscreen(@NonNull Boolean fullscreen);

    /** The codec used by UtilsApi. */
    static MessageCodec<Object> getCodec() {
      return       UtilsApiCodec.INSTANCE;    }
    /**Sets up an instance of `UtilsApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, UtilsApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.openWebPage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String titleArg = (String)args.get(0);
              if (titleArg == null) {
                throw new NullPointerException("titleArg unexpectedly null.");
              }
              String urlArg = (String)args.get(1);
              if (urlArg == null) {
                throw new NullPointerException("urlArg unexpectedly null.");
              }
              api.openWebPage(titleArg, urlArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.openSignInCustomTab", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String urlArg = (String)args.get(0);
              if (urlArg == null) {
                throw new NullPointerException("urlArg unexpectedly null.");
              }
              Result<SignInCallback> resultCallback = new Result<SignInCallback>() {
                public void success(SignInCallback result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.openSignInCustomTab(urlArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.updateWidgets", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.updateWidgets();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.requestIDFA", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestIDFA(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.setWakeLock", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean wakeLockArg = (Boolean)args.get(0);
              if (wakeLockArg == null) {
                throw new NullPointerException("wakeLockArg unexpectedly null.");
              }
              api.setWakeLock(wakeLockArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.setFullscreen", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean fullscreenArg = (Boolean)args.get(0);
              if (fullscreenArg == null) {
                throw new NullPointerException("fullscreenArg unexpectedly null.");
              }
              api.setFullscreen(fullscreenArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class AppLinkHandlerApi {
    private final BinaryMessenger binaryMessenger;
    public AppLinkHandlerApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by AppLinkHandlerApi. */
    static MessageCodec<Object> getCodec() {
      return       new StandardMessageCodec();
    }
    public void handleUri(@NonNull String uriArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppLinkHandlerApi.handleUri", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(uriArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FirestoreApi {
    private final BinaryMessenger binaryMessenger;
    public FirestoreApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FirestoreApi. */
    static MessageCodec<Object> getCodec() {
      return       new StandardMessageCodec();
    }
    public void saveMessagingToken(@NonNull String tokenArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FirestoreApi.saveMessagingToken", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(tokenArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
