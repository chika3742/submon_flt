// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package net.chikach.submon;

import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;

/**
 * Generated class from Pigeon.
 */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  @NonNull
  private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  /**
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface UtilsApi {
    /**
     * The codec used by UtilsApi.
     */
    static MessageCodec<Object> getCodec() {
      return UtilsApiCodec.INSTANCE;
    }

    /**
     * Sets up an instance of `UtilsApi` to handle messages through the `binaryMessenger`.
     */
    static void setup(BinaryMessenger binaryMessenger, UtilsApi api) {
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.openWebPage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>) message;
              assert args != null;
              String titleArg = (String) args.get(0);
              if (titleArg == null) {
                throw new NullPointerException("titleArg unexpectedly null.");
              }
              String urlArg = (String) args.get(1);
              if (urlArg == null) {
                throw new NullPointerException("urlArg unexpectedly null.");
              }
              api.openWebPage(titleArg, urlArg);
              wrapped.put("result", null);
            } catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UtilsApi.openSignInCustomTab", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>) message;
              assert args != null;
              String urlArg = (String) args.get(0);
              if (urlArg == null) {
                throw new NullPointerException("urlArg unexpectedly null.");
              }
              Result<SignInResponse> resultCallback = new Result<SignInResponse>() {
                public void success(SignInResponse result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }

                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.openSignInCustomTab(urlArg, resultCallback);
            } catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }

    void openWebPage(@NonNull String title, @NonNull String url);

    /**
     * Opens Custom Tab for signing in. Returns response URI with token query parameters.
     */
    void openSignInCustomTab(@NonNull String url, Result<SignInResponse> result);
  }

  /**
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static class SignInResponse {
    private @Nullable String responseUri;

    static @NonNull SignInResponse fromMap(@NonNull Map<String, Object> map) {
      SignInResponse pigeonResult = new SignInResponse();
      Object responseUri = map.get("responseUri");
      pigeonResult.setResponseUri((String) responseUri);
      return pigeonResult;
    }

    public @Nullable String getResponseUri() {
      return responseUri;
    }

    public void setResponseUri(@Nullable String setterArg) {
      this.responseUri = setterArg;
    }

    @NonNull
    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("responseUri", responseUri);
      return toMapResult;
    }

    public static final class Builder {
      private @Nullable String responseUri;

      public @NonNull Builder setResponseUri(@Nullable String setterArg) {
        this.responseUri = setterArg;
        return this;
      }

      public @NonNull SignInResponse build() {
        SignInResponse pigeonReturn = new SignInResponse();
        pigeonReturn.setResponseUri(responseUri);
        return pigeonReturn;
      }
    }
  }

  private static class UtilsApiCodec extends StandardMessageCodec {
    public static final UtilsApiCodec INSTANCE = new UtilsApiCodec();

    private UtilsApiCodec() {
    }

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return SignInResponse.fromMap((Map<String, Object>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);

      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof SignInResponse) {
        stream.write(128);
        writeValue(stream, ((SignInResponse) value).toMap());
      } else {
        super.writeValue(stream, value);
      }
    }
  }
}
